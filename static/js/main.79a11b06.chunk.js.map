{"version":3,"sources":["components/ScoreBoard.js","components/GameOver.js","images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","images/blank.png","App.js","index.js"],"names":["scheduler","ToadScheduler","task","Task","localStorage","setItem","JSON","stringify","username","score","resetScore","SimpleIntervalJob","days","addSimpleIntervalJob","submitted","ScoreBoard","moves","data","getItem","getData","a","parse","saveData","obj","document","getElementById","value","push","useEffect","descendingScore","sort","b","className","style","type","id","placeholder","onClick","map","gameState","index","GameOver","App","candyColors","blueCandy","greenCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","useState","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","movesLeft","setMovesLeft","forbiddenForThree","tempNum","width","firstRow","i","forbiddenForFour","forbiddenForFive","checkMidRight","includes","midRightShape","decidedColor","isBlank","blank","every","square","forEach","checkMidLeft","midLeftShape","checkMidDown","midDownShape","checkMidUp","midUpShape","checkDownRight","downRightShape","checkDownLeft","downLeftShape","checkUpRight","upRightShape","checkUpLeft","upLeftShape","checkColumnOfFive","columnOfFive","checkRowOfFive","rowOfFive","checkColumnOfFour","columnOfFour","checkRowOfFour","rowOfFour","checkColumnOfThree","columnOfThree","checkRowOfThree","rowOfThree","moveDown","randomNum","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMove","isUpRight","isUpLeft","isDownLeft","isDownRight","isMidRight","isMidLeft","isMidDown","isMidUp","isAColumnOfFive","isARowOfFive","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","isDraggable","randomArrangement","randomColor","createBoard","timer","setInterval","clearInterval","candyColor","src","alt","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","String","height","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.79a11b06.chunk.js","sourcesContent":["import { useEffect } from \"react\";\nimport { ToadScheduler, SimpleIntervalJob, Task } from 'toad-scheduler';\n\nconst scheduler = new ToadScheduler();\n\nconst task = new Task('reset scores', () => {\n\tlet obj = [{ username: 'John', score: 15}, { username: 'David', score: 13}, {username: 'Alicia', score: 12},\n    { username: 'Pete', score: 11}, { username: 'Mike', score: 8}, { username: 'Anne', score: 7}, { username: 'Jake', score: 6},\n    { username: 'Bob', score: 5}, { username: 'Mary', score: 3}, { username: 'William', score: 3}]\n  localStorage.setItem('testData', JSON.stringify(obj));\n});\n\nconst resetScore = new SimpleIntervalJob(\n\t{ days: 1},\n\ttask,\n\t'id_1'\n);\n\nscheduler.addSimpleIntervalJob(resetScore);\n\nvar submitted = false\n\nconst ScoreBoard = ({score, moves}) => {\n  var data = localStorage.getItem('testData')\n  if(!localStorage.getItem('testData')) {\n    let obj = [{ username: 'John', score: 15}, { username: 'David', score: 13}, {username: 'Alicia', score: 12},\n    { username: 'Pete', score: 11}, { username: 'Mike', score: 8}, { username: 'Anne', score: 7}, { username: 'Jake', score: 6},\n    { username: 'Bob', score: 5}, { username: 'Mary', score: 3}, { username: 'William', score: 3}]\n    localStorage.setItem('testData', JSON.stringify(obj));\n  }\n  const getData = async () => {\n    data = localStorage.getItem('testData')\n    data = JSON.parse(data)\n    \n  }\n\n  const saveData = async () => {\n    if(!submitted) {\n      data = localStorage.getItem('testData')\n      data = JSON.parse(data)\n      let obj = { username: document.getElementById('username').value, score: score}\n      data.push(obj)\n      localStorage.setItem('testData', JSON.stringify(data));\n\n      submitted = true\n    }\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const descendingScore = JSON.parse(data)?.sort((a, b) => b.score - a.score)\n\n  return (\n      <div className=\"score-board\">\n          <h3 className=\"values\" style={{'display': 'inline-block'}}>Score: {score}</h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<h3 className=\"values\" style={{'display': 'inline-block'}}>Moves: {moves}</h3>\n          <br />\n          <input type=\"text\" id=\"username\" className=\"username\" placeholder=\"Your username..\"></input> <button onClick={saveData}>Submit</button>\n          <br /><br /><br />\n          <table id=\"scores\">\n          <h3 className=\"values\" style={{'display': 'inline-block'}, {'text-align': 'center'}}>Today's High Scores</h3>\n          {descendingScore?.map((gameState, index) => (\n              <tbody key={index}>\n                { index<1 && <tr><th>Username</th><th>Score</th></tr> }\n                { index<10 && <tr><td>{gameState.username}</td><td>{gameState.score}</td></tr> }\n              </tbody>  \n          ))}\n          </table>\n      </div>\n  )\n}\n\nexport default ScoreBoard;","const GameOver = ({score, moves}) => {\n    if(!moves) {\n      return (\n          <div style={{'opacity': '75%'}} className=\"game-over\">\n              <h2>Game Over!</h2>\n          </div>\n      )\n    }\n    return false\n  }\n  \n  export default GameOver;","export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","export default __webpack_public_path__ + \"static/media/blank.973227b4.png\";","import { useEffect, useState } from 'react'\nimport ScoreBoard from './components/ScoreBoard.js'\nimport GameOver from './components/GameOver.js'\nimport blueCandy from './images/blue-candy.png'\nimport greenCandy from './images/green-candy.png'\nimport orangeCandy from './images/orange-candy.png'\nimport purpleCandy from './images/purple-candy.png'\nimport redCandy from './images/red-candy.png'\nimport yellowCandy from './images/yellow-candy.png'\nimport blank from './images/blank.png'\n\nconst App = () => {\n  // width and moves can be changed from here\n  const width = 9 \n  const moves = 20\n  const candyColors = [\n  blueCandy,\n  greenCandy,\n  orangeCandy,\n  purpleCandy,\n  redCandy,\n  yellowCandy\n  ]\n  \n  const [currentColorArrangement, setCurrentColorArrangement] = useState([])\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null)\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null)\n  const [ scoreDisplay, setScoreDisplay ] = useState(0)\n  const [ movesLeft, setMovesLeft ] = useState(moves)\n  \n  var forbiddenForThree = []\n  var tempNum = width - 2\n  var firstRow = []\n  \n  for(let i = 0; i < width; i++) {\n    firstRow[i] = i\n  }\n  \n  for(let i = 0; i < width; i++) {\n    forbiddenForThree.push(tempNum)\n    tempNum++\n    forbiddenForThree.push(tempNum)\n    tempNum += width - 1\n  }\n  \n  var forbiddenForFour = []\n  tempNum = width - 3\n  \n  for(let i = 0; i < width; i++) {\n    forbiddenForFour.push(tempNum)\n    tempNum++\n    forbiddenForFour.push(tempNum)\n    tempNum++\n    forbiddenForFour.push(tempNum)\n    tempNum += width - 2\n  }\n  \n  var forbiddenForFive = []\n  tempNum = width - 4\n  for(let i = 0; i < width; i++) {\n    forbiddenForFive.push(tempNum)\n    tempNum++\n    forbiddenForFive.push(tempNum)\n    tempNum++\n    forbiddenForFive.push(tempNum)\n    tempNum++\n    forbiddenForFive.push(tempNum)\n    tempNum += width - 3\n  }\n\n  const checkMidRight = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const midRightShape = [i, i + width, i + width * 2, i + width + 1, i + width + 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if(midRightShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        midRightShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkMidLeft = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const midLeftShape = [i + width, i + 2, i + width * 2, i + width * 2 + 1, i + width * 2 + 2]\n      const decidedColor = currentColorArrangement[i + 2]\n      const isBlank = currentColorArrangement[i + 2] === blank\n\n      if(midLeftShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        midLeftShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkMidDown = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const midDownShape = [i + 1, i + width * 2, i + width * 2 + 1, i + width * 2 + 2, i + width + 1]\n      const decidedColor = currentColorArrangement[i + 1]\n      const isBlank = currentColorArrangement[i + 1] === blank\n\n      if(midDownShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        midDownShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkMidUp = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const midUpShape = [i, i + 1, i + 2, i + width + 1, i + width * 2 + 1]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if(midUpShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        midUpShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkDownRight = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const downRightShape = [i, i + width, i + width * 2, i + width * 2 + 1, i + width * 2 + 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if(downRightShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        downRightShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkDownLeft = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const downLeftShape = [i + width * 2, i + width * 2 + 1, i + width * 2 + 2, i + 2, i + width]\n      const decidedColor = currentColorArrangement[i + 2]\n      const isBlank = currentColorArrangement[i + 2] === blank\n\n      if(downLeftShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        downLeftShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkUpRight = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const upRightShape = [i, i + 1, i + 2, i + width, i + width * 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if(upRightShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        upRightShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkUpLeft = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const upLeftShape = [i, i + 1, i + 2, i + 2 + width, i + 2 + width * 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if(upLeftShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        upLeftShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkColumnOfFive = () => {\n    for(let i = 0; i < width * width - 4 * width; i++) {\n      const columnOfFive = [i, i + width, i + width * 2, i + width * 3, i + width * 4]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      \n      if(columnOfFive.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        columnOfFive.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkRowOfFive = () => {\n    for(let i = 0; i < width * width; i++) {\n      if(forbiddenForFive.includes(i)) continue\n      const rowOfFive = [i, i + 1, i + 2, i + 3, i + 4]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      \n      if(rowOfFive.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        rowOfFive.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkColumnOfFour = () => {\n    for(let i = 0; i < width * width - 3 * width; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      \n      if(columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        columnOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkRowOfFour = () => {\n    for(let i = 0; i < width * width; i++) {\n      if(forbiddenForFour.includes(i)) continue\n      const rowOfFour = [i, i + 1, i + 2, i + 3]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      \n      if(rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        rowOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkColumnOfThree = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      const columnOfThree = [i, i + width, i + width * 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      \n      if(columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        columnOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkRowOfThree = () => {\n    for(let i = 0; i < width * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const rowOfThree = [i, i + 1, i + 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      \n      if(rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        rowOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const moveDown = () => {\n    for(let i = 0; i < width * width - width; i++) {\n      \n      const isFirstRow = firstRow.includes(i)\n      \n      if(isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNum = Math.floor(Math.random() * candyColors.length)\n        currentColorArrangement[i] = candyColors[randomNum]\n      }\n      \n      if(currentColorArrangement[i + width] === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i]\n        currentColorArrangement[i] = blank\n      }\n      \n      checkUpRight()\n      checkUpLeft()\n      checkDownRight()\n      checkDownLeft()\n      checkMidRight()\n      checkMidLeft()\n      checkMidDown()\n      checkMidUp()\n      checkColumnOfFive()\n      checkRowOfFive()\n      checkColumnOfFour()\n      checkRowOfFour()\n      checkColumnOfThree()\n      checkRowOfThree()\n      \n    } \n    \n  }\n  \n  const dragStart = (e) => {\n    setSquareBeingDragged(e.target)\n  }\n  \n  const dragDrop = (e) => {\n    setSquareBeingReplaced(e.target)\n  }\n  \n  const dragEnd = (e) => {\n    const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'))\n    if(squareBeingReplaced) {\n      const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\n      \n      currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src')\n      currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\n      \n      const validMoves = [\n        squareBeingDraggedId - 1,\n        squareBeingDraggedId - width,\n        squareBeingDraggedId + 1,\n        squareBeingDraggedId + width\n      ]\n      \n      const validMove = validMoves.includes(squareBeingReplacedId)\n      \n      if(squareBeingReplacedId && validMove) {\n        const isUpRight = checkUpRight()\n        const isUpLeft = checkUpLeft()\n        const isDownLeft = checkDownLeft()\n        const isDownRight = checkDownRight()\n        const isMidRight = checkMidRight()\n        const isMidLeft = checkMidLeft()\n        const isMidDown = checkMidDown()\n        const isMidUp = checkMidUp()\n        const isAColumnOfFive = checkColumnOfFive()\n        const isARowOfFive = checkRowOfFive()\n        const isAColumnOfFour = checkColumnOfFour()\n        const isARowOfFour = checkRowOfFour()\n        const isAColumnOfThree = checkColumnOfThree()\n        const isARowOfThree = checkRowOfThree()\n        if(isAColumnOfFive || isARowOfFive || isAColumnOfFour || isARowOfFour || isAColumnOfThree || isARowOfThree || isUpRight ||\n          isUpLeft || isDownLeft || isDownRight || isMidRight || isMidLeft || isMidDown || isMidUp) {\n          setSquareBeingDragged(null)\n          setSquareBeingReplaced(null)\n          setMovesLeft((moves) => moves - 1)\n          if(!movesLeft) {\n            return 'Game Over!'\n          }\n        } else {\n          currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\n          currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src')\n          setCurrentColorArrangement([...currentColorArrangement])\n        }\n      } else {\n        currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\n        currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src')\n        setCurrentColorArrangement([...currentColorArrangement])\n      }\n    }\n    \n  }\n  \n  const isDraggable = () => {\n    if(!movesLeft) {\n      return false\n    }\n  }\n\n  const createBoard = () => {\n    const randomArrangement = []\n    for(let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n      if(randomColor === randomArrangement[i-1]) {\n        if(randomColor === randomArrangement[i-2] || randomColor === randomArrangement[i+1]) {\n          i--;\n          continue;\n        }\n      }\n      if(randomColor === randomArrangement[i+1] && randomColor === randomArrangement[i+2]) {\n        i--;\n        continue;\n      }\n      if(randomColor === randomArrangement[i-width]) {\n        if(randomColor === randomArrangement[i-width*2] || randomColor === randomArrangement[i+width]) {\n          i--;\n          continue;\n        }\n      }\n      if(randomColor === randomArrangement[i+width] && randomColor === randomArrangement[i+width*2]) {\n        i--;\n        continue;\n      }\n      \n      randomArrangement[i] = randomColor\n    }\n    \n    setCurrentColorArrangement(randomArrangement)\n  }\n  \n  useEffect(() => {\n    createBoard()\n  }, [])\n  \n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkUpRight()\n      checkUpLeft()\n      checkDownRight()\n      checkDownLeft()\n      checkMidRight()\n      checkMidLeft()\n      checkMidDown()\n      checkMidUp()\n      checkColumnOfFive()\n      checkRowOfFive()\n      checkColumnOfFour()\n      checkRowOfFour()\n      checkColumnOfThree()\n      checkRowOfThree()\n      moveDown()\n      setCurrentColorArrangement([...currentColorArrangement])\n    }, 30)\n    \n    return () => clearInterval(timer)\n  }, [checkUpRight, checkUpLeft, checkDownRight, checkDownLeft, checkMidRight, checkMidLeft, checkMidDown, checkMidUp,\n    checkColumnOfFive, checkRowOfFive, checkColumnOfFour, checkRowOfFour, checkColumnOfThree, checkRowOfThree, moveDown,\n    currentColorArrangement])\n    \n  return (\n      <div className=\"app\">\n        <div className=\"game\">\n          <GameOver score={scoreDisplay} moves={movesLeft} />\n          {currentColorArrangement.map((candyColor, index) => (\n            <img key={index} src={candyColor} alt={candyColor} data-id={index} draggable={isDraggable()}\n            onDragStart={dragStart} onDragOver={(e) => e.preventDefault()} onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()} onDrop={dragDrop} onDragEnd={dragEnd} className=\"candy\"\n            style={{width: String(100/width) + '%', height: String(100/width) + '%'}} />\n          ))}\n        </div>\n        <ScoreBoard score={scoreDisplay} moves={movesLeft} />\n      </div>\n    );\n  }\n      \n  export default App;\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}