{"version":3,"sources":["components/ScoreBoard.js","components/GameOver.js","images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","images/blank.png","App.js","index.js"],"names":["submitted","ScoreBoard","score","moves","useState","gameStates","setGameStates","fetchData","a","axios","get","response","data","Object","keys","map","item","useEffect","descendingGameStates","sort","b","className","style","id","placeholder","onClick","size","length","username","String","document","getElementById","value","post","then","console","log","catch","err","gameState","index","GameOver","App","candyColors","blueCandy","greenCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","movesLeft","setMovesLeft","forbiddenForThree","tempNum","width","firstRow","i","push","forbiddenForFour","forbiddenForFive","checkMidRight","includes","midRightShape","decidedColor","isBlank","blank","every","square","forEach","checkMidLeft","midLeftShape","checkMidDown","midDownShape","checkMidUp","midUpShape","checkDownRight","downRightShape","checkDownLeft","downLeftShape","checkUpRight","upRightShape","checkUpLeft","upLeftShape","checkColumnOfFive","columnOfFive","checkRowOfFive","rowOfFive","checkColumnOfFour","columnOfFour","checkRowOfFour","rowOfFour","checkColumnOfThree","columnOfThree","checkRowOfThree","rowOfThree","moveDown","randomNum","Math","floor","random","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMove","isUpRight","isUpLeft","isDownLeft","isDownRight","isMidRight","isMidLeft","isMidDown","isMidUp","isAColumnOfFive","isARowOfFive","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","isDraggable","randomArrangement","randomColor","createBoard","timer","setInterval","clearInterval","candyColor","src","alt","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","height","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.940811b7.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nvar submitted = false\n\nconst ScoreBoard = ({score, moves}) => {\n  const [gameStates, setGameStates] = useState(null)\n\n  const fetchData = async () => {\n    const response = await axios.get('https://michaelkharadze.github.io/candy-crush-react/scores')\n    const data = Object.keys(response.data.data).map(item => response.data.data[item])\n    setGameStates(data)\n  }\n\n  const saveData = () => {\n    let size = descendingGameStates?.length\n    if(descendingGameStates) {\n      if(score > descendingGameStates[size - 1].score && !submitted) {\n        const data = {\n          username: String(document.getElementById('username').value),\n          score: score\n        }\n\n        submitted = true\n\n        axios.post('https://michaelkharadze.github.io/candy-crush-react/addscore', data)\n            .then(response => {console.log(response)})\n            .catch(err => console.log(err))\n            .then(fetchData)\n      }\n    }\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  const descendingGameStates = gameStates?.sort((a, b) => b.score - a.score)\n\n  return (\n      <div className=\"score-board\">\n          <h2 style={{'display': 'inline-block'}}>Score: {score}</h2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<h2 style={{'display': 'inline-block'}}>Moves: {moves}</h2>\n          <br />\n          <input style={{'border': '0px'}} id=\"username\" className=\"username\" placeholder=\"type username\"></input> <button style={{'border': '0px'}} onClick={saveData}>Save Score</button>\n          <br /><br /><br />\n          <h2>High Scores:</h2>\n          {descendingGameStates?.map((gameState, index) => (\n            <div key={index}>\n              <p>{gameState.username}: {gameState.score}</p>\n            </div>\n          ))}\n      </div>\n  )\n}\n\nexport default ScoreBoard;","const GameOver = ({score, moves}) => {\n    if(!moves) {\n      return (\n          <div style={{'opacity': '75%'}} className=\"game-over\">\n              <h2>Game Over!</h2>\n          </div>\n      )\n    }\n    return false\n  }\n  \n  export default GameOver;","export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","import { useEffect, useState } from 'react'\nimport ScoreBoard from './components/ScoreBoard.js'\nimport GameOver from './components/GameOver.js'\nimport blueCandy from './images/blue-candy.png'\nimport greenCandy from './images/green-candy.png'\nimport orangeCandy from './images/orange-candy.png'\nimport purpleCandy from './images/purple-candy.png'\nimport redCandy from './images/red-candy.png'\nimport yellowCandy from './images/yellow-candy.png'\nimport blank from './images/blank.png'\n\nconst App = () => {\n  var width = 9\n  const moves = 20\n  const candyColors = [\n  blueCandy,\n  greenCandy,\n  orangeCandy,\n  purpleCandy,\n  redCandy,\n  yellowCandy\n  ]\n  \n  const [currentColorArrangement, setCurrentColorArrangement] = useState([])\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null)\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null)\n  const [ scoreDisplay, setScoreDisplay ] = useState(0)\n  const [ movesLeft, setMovesLeft ] = useState(moves)\n  \n  var forbiddenForThree = []\n  var tempNum = width - 2\n  var firstRow = []\n  \n  for(let i = 0; i < width; i++) {\n    firstRow[i] = i\n  }\n  \n  for(let i = 0; i < width; i++) {\n    forbiddenForThree.push(tempNum)\n    tempNum++\n    forbiddenForThree.push(tempNum)\n    tempNum += width - 1\n  }\n  \n  var forbiddenForFour = []\n  tempNum = width - 3\n  \n  for(let i = 0; i < width; i++) {\n    forbiddenForFour.push(tempNum)\n    tempNum++\n    forbiddenForFour.push(tempNum)\n    tempNum++\n    forbiddenForFour.push(tempNum)\n    tempNum += width - 2\n  }\n  \n  var forbiddenForFive = []\n  tempNum = width - 4\n  for(let i = 0; i < width; i++) {\n    forbiddenForFive.push(tempNum)\n    tempNum++\n    forbiddenForFive.push(tempNum)\n    tempNum++\n    forbiddenForFive.push(tempNum)\n    tempNum++\n    forbiddenForFive.push(tempNum)\n    tempNum += width - 3\n  }\n\n  const checkMidRight = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const midRightShape = [i, i + width, i + width * 2, i + width + 1, i + width + 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if(midRightShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        midRightShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkMidLeft = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const midLeftShape = [i + width, i + 2, i + width * 2, i + width * 2 + 1, i + width * 2 + 2]\n      const decidedColor = currentColorArrangement[i + 2]\n      const isBlank = currentColorArrangement[i + 2] === blank\n\n      if(midLeftShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        midLeftShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkMidDown = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const midDownShape = [i + 1, i + width * 2, i + width * 2 + 1, i + width * 2 + 2, i + width + 1]\n      const decidedColor = currentColorArrangement[i + 1]\n      const isBlank = currentColorArrangement[i + 1] === blank\n\n      if(midDownShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        midDownShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkMidUp = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const midUpShape = [i, i + 1, i + 2, i + width + 1, i + width * 2 + 1]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if(midUpShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        midUpShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkDownRight = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const downRightShape = [i, i + width, i + width * 2, i + width * 2 + 1, i + width * 2 + 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if(downRightShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        downRightShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkDownLeft = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const downLeftShape = [i + width * 2, i + width * 2 + 1, i + width * 2 + 2, i + 2, i + width]\n      const decidedColor = currentColorArrangement[i + 2]\n      const isBlank = currentColorArrangement[i + 2] === blank\n\n      if(downLeftShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        downLeftShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkUpRight = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const upRightShape = [i, i + 1, i + 2, i + width, i + width * 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if(upRightShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        upRightShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkUpLeft = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const upLeftShape = [i, i + 1, i + 2, i + 2 + width, i + 2 + width * 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if(upLeftShape.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        upLeftShape.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkColumnOfFive = () => {\n    for(let i = 0; i < width * width - 4 * width; i++) {\n      const columnOfFive = [i, i + width, i + width * 2, i + width * 3, i + width * 4]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      \n      if(columnOfFive.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        columnOfFive.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkRowOfFive = () => {\n    for(let i = 0; i < width * width; i++) {\n      if(forbiddenForFive.includes(i)) continue\n      const rowOfFive = [i, i + 1, i + 2, i + 3, i + 4]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      \n      if(rowOfFive.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 5)\n        rowOfFive.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkColumnOfFour = () => {\n    for(let i = 0; i < width * width - 3 * width; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      \n      if(columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        columnOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkRowOfFour = () => {\n    for(let i = 0; i < width * width; i++) {\n      if(forbiddenForFour.includes(i)) continue\n      const rowOfFour = [i, i + 1, i + 2, i + 3]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      \n      if(rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        rowOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkColumnOfThree = () => {\n    for(let i = 0; i < width * width - 2 * width; i++) {\n      const columnOfThree = [i, i + width, i + width * 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      \n      if(columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        columnOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const checkRowOfThree = () => {\n    for(let i = 0; i < width * width; i++) {\n      if(forbiddenForThree.includes(i)) continue\n      const rowOfThree = [i, i + 1, i + 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n      \n      if(rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        rowOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n  \n  const moveDown = () => {\n    for(let i = 0; i < width * width - width; i++) {\n      \n      const isFirstRow = firstRow.includes(i)\n      \n      if(isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNum = Math.floor(Math.random() * candyColors.length)\n        currentColorArrangement[i] = candyColors[randomNum]\n      }\n      \n      if(currentColorArrangement[i + width] === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i]\n        currentColorArrangement[i] = blank\n      }\n      \n      checkUpRight()\n      checkUpLeft()\n      checkDownRight()\n      checkDownLeft()\n      checkMidRight()\n      checkMidLeft()\n      checkMidDown()\n      checkMidUp()\n      checkColumnOfFive()\n      checkRowOfFive()\n      checkColumnOfFour()\n      checkRowOfFour()\n      checkColumnOfThree()\n      checkRowOfThree()\n      \n    } \n    \n  }\n  \n  const dragStart = (e) => {\n    setSquareBeingDragged(e.target)\n  }\n  \n  const dragDrop = (e) => {\n    setSquareBeingReplaced(e.target)\n  }\n  \n  const dragEnd = (e) => {\n    const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'))\n    if(squareBeingReplaced) {\n      const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\n      \n      currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src')\n      currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\n      \n      const validMoves = [\n        squareBeingDraggedId - 1,\n        squareBeingDraggedId - width,\n        squareBeingDraggedId + 1,\n        squareBeingDraggedId + width\n      ]\n      \n      const validMove = validMoves.includes(squareBeingReplacedId)\n      \n      if(squareBeingReplacedId && validMove) {\n        const isUpRight = checkUpRight()\n        const isUpLeft = checkUpLeft()\n        const isDownLeft = checkDownLeft()\n        const isDownRight = checkDownRight()\n        const isMidRight = checkMidRight()\n        const isMidLeft = checkMidLeft()\n        const isMidDown = checkMidDown()\n        const isMidUp = checkMidUp()\n        const isAColumnOfFive = checkColumnOfFive()\n        const isARowOfFive = checkRowOfFive()\n        const isAColumnOfFour = checkColumnOfFour()\n        const isARowOfFour = checkRowOfFour()\n        const isAColumnOfThree = checkColumnOfThree()\n        const isARowOfThree = checkRowOfThree()\n        if(isAColumnOfFive || isARowOfFive || isAColumnOfFour || isARowOfFour || isAColumnOfThree || isARowOfThree || isUpRight ||\n          isUpLeft || isDownLeft || isDownRight || isMidRight || isMidLeft || isMidDown || isMidUp) {\n          setSquareBeingDragged(null)\n          setSquareBeingReplaced(null)\n          setMovesLeft((moves) => moves - 1)\n          if(!movesLeft) {\n            return 'Game Over!'\n          }\n        } else {\n          currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\n          currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src')\n          setCurrentColorArrangement([...currentColorArrangement])\n        }\n      } else {\n        currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\n        currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src')\n        setCurrentColorArrangement([...currentColorArrangement])\n      }\n    }\n    \n  }\n  \n  const isDraggable = () => {\n    if(!movesLeft) {\n      return false\n    }\n  }\n\n  const createBoard = () => {\n    console.log(width)\n    const randomArrangement = []\n    for(let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n      if(randomColor === randomArrangement[i-1]) {\n        if(randomColor === randomArrangement[i-2] || randomColor === randomArrangement[i+1]) {\n          i--;\n          continue;\n        }\n      }\n      if(randomColor === randomArrangement[i+1] && randomColor === randomArrangement[i+2]) {\n        i--;\n        continue;\n      }\n      if(randomColor === randomArrangement[i-width]) {\n        if(randomColor === randomArrangement[i-width*2] || randomColor === randomArrangement[i+width]) {\n          i--;\n          continue;\n        }\n      }\n      if(randomColor === randomArrangement[i+width] && randomColor === randomArrangement[i+width*2]) {\n        i--;\n        continue;\n      }\n      \n      randomArrangement[i] = randomColor\n    }\n    \n    setCurrentColorArrangement(randomArrangement)\n  }\n  \n  useEffect(() => {\n    createBoard()\n  }, [])\n  \n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkUpRight()\n      checkUpLeft()\n      checkDownRight()\n      checkDownLeft()\n      checkMidRight()\n      checkMidLeft()\n      checkMidDown()\n      checkMidUp()\n      checkColumnOfFive()\n      checkRowOfFive()\n      checkColumnOfFour()\n      checkRowOfFour()\n      checkColumnOfThree()\n      checkRowOfThree()\n      moveDown()\n      setCurrentColorArrangement([...currentColorArrangement])\n    }, 30)\n    \n    return () => clearInterval(timer)\n  }, [checkUpRight, checkUpLeft, checkDownRight, checkDownLeft, checkMidRight, checkMidLeft, checkMidDown, checkMidUp,\n    checkColumnOfFive, checkRowOfFive, checkColumnOfFour, checkRowOfFour, checkColumnOfThree, checkRowOfThree, moveDown,\n    currentColorArrangement])\n    \n  return (\n      <div className=\"app\">\n        <div className=\"game\">\n          <GameOver score={scoreDisplay} moves={movesLeft} />\n          {currentColorArrangement.map((candyColor, index) => (\n            <img key={index} src={candyColor} alt={candyColor} data-id={index} draggable={isDraggable()}\n            onDragStart={dragStart} onDragOver={(e) => e.preventDefault()} onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()} onDrop={dragDrop} onDragEnd={dragEnd} className=\"candy\"\n            style={{width: String(100/width) + '%', height: String(100/width) + '%'}} />\n          ))}\n        </div>\n        <ScoreBoard score={scoreDisplay} moves={movesLeft} />\n      </div>\n    );\n  }\n      \n  export default App;\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}